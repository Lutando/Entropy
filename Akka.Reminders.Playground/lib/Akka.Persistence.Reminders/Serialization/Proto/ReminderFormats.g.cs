// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReminderFormats.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Persistence.Reminders.Serialization.Proto {

  /// <summary>Holder for reflection information generated from ReminderFormats.proto</summary>
  internal static partial class ReminderFormatsReflection {

    #region Descriptor
    /// <summary>File descriptor for ReminderFormats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReminderFormatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVSZW1pbmRlckZvcm1hdHMucHJvdG8SLkFra2EuUGVyc2lzdGVuY2UuUmVt",
            "aW5kZXJzLlNlcmlhbGl6YXRpb24uUHJvdG8iRAoMT3RoZXJNZXNzYWdlEhQK",
            "DFNlcmlhbGl6ZXJJZBgBIAEoBRIMCgRCb2R5GAIgASgMEhAKCE1hbmlmZXN0",
            "GAMgASgJIsYBCg1SZW1pbmRlckVudHJ5Eg4KBlRhc2tJZBgBIAEoCRIRCglS",
            "ZWNpcGllbnQYAiABKAkSTQoHUGF5bG9hZBgDIAEoCzI8LkFra2EuUGVyc2lz",
            "dGVuY2UuUmVtaW5kZXJzLlNlcmlhbGl6YXRpb24uUHJvdG8uT3RoZXJNZXNz",
            "YWdlEhMKC1RyaWdnZXJEYXRlGAQgASgDEhYKDlJlcGVhdEludGVydmFsGAUg",
            "ASgDEhYKDkNyb25FeHByZXNzaW9uGAYgASgJIl8KDVJlbWluZGVyU3RhdGUS",
            "TgoHRW50cmllcxgBIAMoCzI9LkFra2EuUGVyc2lzdGVuY2UuUmVtaW5kZXJz",
            "LlNlcmlhbGl6YXRpb24uUHJvdG8uUmVtaW5kZXJFbnRyeSKUAgoQUmVtaW5k",
            "ZXJTY2hlZHVsZRIOCgZUYXNrSWQYASABKAkSEQoJUmVjaXBpZW50GAIgASgJ",
            "Ek0KB1BheWxvYWQYAyABKAsyPC5Ba2thLlBlcnNpc3RlbmNlLlJlbWluZGVy",
            "cy5TZXJpYWxpemF0aW9uLlByb3RvLk90aGVyTWVzc2FnZRITCgtUcmlnZ2Vy",
            "RGF0ZRgEIAEoAxIWCg5SZXBlYXRJbnRlcnZhbBgFIAEoAxJJCgNBY2sYBiAB",
            "KAsyPC5Ba2thLlBlcnNpc3RlbmNlLlJlbWluZGVycy5TZXJpYWxpemF0aW9u",
            "LlByb3RvLk90aGVyTWVzc2FnZRIWCg5Dcm9uRXhwcmVzc2lvbhgHIAEoCSJh",
            "ChFSZW1pbmRlclNjaGVkdWxlZBJMCgVFbnRyeRgBIAEoCzI9LkFra2EuUGVy",
            "c2lzdGVuY2UuUmVtaW5kZXJzLlNlcmlhbGl6YXRpb24uUHJvdG8uUmVtaW5k",
            "ZXJFbnRyeSI7ChFSZW1pbmRlckNvbXBsZXRlZBIOCgZUYXNrSWQYASABKAkS",
            "FgoOQ29tcGxldGlvbkRhdGUYAiABKAMiawoOUmVtaW5kZXJDYW5jZWwSDgoG",
            "VGFza0lkGAEgASgJEkkKA0FjaxgCIAEoCzI8LkFra2EuUGVyc2lzdGVuY2Uu",
            "UmVtaW5kZXJzLlNlcmlhbGl6YXRpb24uUHJvdG8uT3RoZXJNZXNzYWdlYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage), global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage.Parser, new[]{ "SerializerId", "Body", "Manifest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry), global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry.Parser, new[]{ "TaskId", "Recipient", "Payload", "TriggerDate", "RepeatInterval", "CronExpression" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Reminders.Serialization.Proto.ReminderState), global::Akka.Persistence.Reminders.Serialization.Proto.ReminderState.Parser, new[]{ "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Reminders.Serialization.Proto.ReminderSchedule), global::Akka.Persistence.Reminders.Serialization.Proto.ReminderSchedule.Parser, new[]{ "TaskId", "Recipient", "Payload", "TriggerDate", "RepeatInterval", "Ack", "CronExpression" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Reminders.Serialization.Proto.ReminderScheduled), global::Akka.Persistence.Reminders.Serialization.Proto.ReminderScheduled.Parser, new[]{ "Entry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Reminders.Serialization.Proto.ReminderCompleted), global::Akka.Persistence.Reminders.Serialization.Proto.ReminderCompleted.Parser, new[]{ "TaskId", "CompletionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Reminders.Serialization.Proto.ReminderCancel), global::Akka.Persistence.Reminders.Serialization.Proto.ReminderCancel.Parser, new[]{ "TaskId", "Ack" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class OtherMessage : pb::IMessage<OtherMessage> {
    private static readonly pb::MessageParser<OtherMessage> _parser = new pb::MessageParser<OtherMessage>(() => new OtherMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Reminders.Serialization.Proto.ReminderFormatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherMessage(OtherMessage other) : this() {
      serializerId_ = other.serializerId_;
      body_ = other.body_;
      manifest_ = other.manifest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherMessage Clone() {
      return new OtherMessage(this);
    }

    /// <summary>Field number for the "SerializerId" field.</summary>
    public const int SerializerIdFieldNumber = 1;
    private int serializerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerializerId {
      get { return serializerId_; }
      set {
        serializerId_ = value;
      }
    }

    /// <summary>Field number for the "Body" field.</summary>
    public const int BodyFieldNumber = 2;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Manifest" field.</summary>
    public const int ManifestFieldNumber = 3;
    private string manifest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manifest {
      get { return manifest_; }
      set {
        manifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerializerId != other.SerializerId) return false;
      if (Body != other.Body) return false;
      if (Manifest != other.Manifest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerializerId != 0) hash ^= SerializerId.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (Manifest.Length != 0) hash ^= Manifest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerializerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SerializerId);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Body);
      }
      if (Manifest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Manifest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerializerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerId);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (Manifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manifest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherMessage other) {
      if (other == null) {
        return;
      }
      if (other.SerializerId != 0) {
        SerializerId = other.SerializerId;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      if (other.Manifest.Length != 0) {
        Manifest = other.Manifest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SerializerId = input.ReadInt32();
            break;
          }
          case 18: {
            Body = input.ReadBytes();
            break;
          }
          case 26: {
            Manifest = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReminderEntry : pb::IMessage<ReminderEntry> {
    private static readonly pb::MessageParser<ReminderEntry> _parser = new pb::MessageParser<ReminderEntry>(() => new ReminderEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReminderEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Reminders.Serialization.Proto.ReminderFormatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderEntry(ReminderEntry other) : this() {
      taskId_ = other.taskId_;
      recipient_ = other.recipient_;
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
      triggerDate_ = other.triggerDate_;
      repeatInterval_ = other.repeatInterval_;
      cronExpression_ = other.cronExpression_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderEntry Clone() {
      return new ReminderEntry(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Recipient" field.</summary>
    public const int RecipientFieldNumber = 2;
    private string recipient_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recipient {
      get { return recipient_; }
      set {
        recipient_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "TriggerDate" field.</summary>
    public const int TriggerDateFieldNumber = 4;
    private long triggerDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TriggerDate {
      get { return triggerDate_; }
      set {
        triggerDate_ = value;
      }
    }

    /// <summary>Field number for the "RepeatInterval" field.</summary>
    public const int RepeatIntervalFieldNumber = 5;
    private long repeatInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RepeatInterval {
      get { return repeatInterval_; }
      set {
        repeatInterval_ = value;
      }
    }

    /// <summary>Field number for the "CronExpression" field.</summary>
    public const int CronExpressionFieldNumber = 6;
    private string cronExpression_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CronExpression {
      get { return cronExpression_; }
      set {
        cronExpression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReminderEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReminderEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Recipient != other.Recipient) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      if (TriggerDate != other.TriggerDate) return false;
      if (RepeatInterval != other.RepeatInterval) return false;
      if (CronExpression != other.CronExpression) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (Recipient.Length != 0) hash ^= Recipient.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (TriggerDate != 0L) hash ^= TriggerDate.GetHashCode();
      if (RepeatInterval != 0L) hash ^= RepeatInterval.GetHashCode();
      if (CronExpression.Length != 0) hash ^= CronExpression.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (Recipient.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Recipient);
      }
      if (payload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Payload);
      }
      if (TriggerDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TriggerDate);
      }
      if (RepeatInterval != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RepeatInterval);
      }
      if (CronExpression.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CronExpression);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (Recipient.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recipient);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (TriggerDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TriggerDate);
      }
      if (RepeatInterval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RepeatInterval);
      }
      if (CronExpression.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CronExpression);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReminderEntry other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.Recipient.Length != 0) {
        Recipient = other.Recipient;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage();
        }
        Payload.MergeFrom(other.Payload);
      }
      if (other.TriggerDate != 0L) {
        TriggerDate = other.TriggerDate;
      }
      if (other.RepeatInterval != 0L) {
        RepeatInterval = other.RepeatInterval;
      }
      if (other.CronExpression.Length != 0) {
        CronExpression = other.CronExpression;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            Recipient = input.ReadString();
            break;
          }
          case 26: {
            if (payload_ == null) {
              payload_ = new global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 32: {
            TriggerDate = input.ReadInt64();
            break;
          }
          case 40: {
            RepeatInterval = input.ReadInt64();
            break;
          }
          case 50: {
            CronExpression = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReminderState : pb::IMessage<ReminderState> {
    private static readonly pb::MessageParser<ReminderState> _parser = new pb::MessageParser<ReminderState>(() => new ReminderState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReminderState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Reminders.Serialization.Proto.ReminderFormatsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderState(ReminderState other) : this() {
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderState Clone() {
      return new ReminderState(this);
    }

    /// <summary>Field number for the "Entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry.Parser);
    private readonly pbc::RepeatedField<global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry> entries_ = new pbc::RepeatedField<global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReminderState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReminderState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReminderState other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReminderSchedule : pb::IMessage<ReminderSchedule> {
    private static readonly pb::MessageParser<ReminderSchedule> _parser = new pb::MessageParser<ReminderSchedule>(() => new ReminderSchedule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReminderSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Reminders.Serialization.Proto.ReminderFormatsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderSchedule(ReminderSchedule other) : this() {
      taskId_ = other.taskId_;
      recipient_ = other.recipient_;
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
      triggerDate_ = other.triggerDate_;
      repeatInterval_ = other.repeatInterval_;
      Ack = other.ack_ != null ? other.Ack.Clone() : null;
      cronExpression_ = other.cronExpression_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderSchedule Clone() {
      return new ReminderSchedule(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Recipient" field.</summary>
    public const int RecipientFieldNumber = 2;
    private string recipient_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recipient {
      get { return recipient_; }
      set {
        recipient_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "TriggerDate" field.</summary>
    public const int TriggerDateFieldNumber = 4;
    private long triggerDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TriggerDate {
      get { return triggerDate_; }
      set {
        triggerDate_ = value;
      }
    }

    /// <summary>Field number for the "RepeatInterval" field.</summary>
    public const int RepeatIntervalFieldNumber = 5;
    private long repeatInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RepeatInterval {
      get { return repeatInterval_; }
      set {
        repeatInterval_ = value;
      }
    }

    /// <summary>Field number for the "Ack" field.</summary>
    public const int AckFieldNumber = 6;
    private global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage ack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage Ack {
      get { return ack_; }
      set {
        ack_ = value;
      }
    }

    /// <summary>Field number for the "CronExpression" field.</summary>
    public const int CronExpressionFieldNumber = 7;
    private string cronExpression_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CronExpression {
      get { return cronExpression_; }
      set {
        cronExpression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReminderSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReminderSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Recipient != other.Recipient) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      if (TriggerDate != other.TriggerDate) return false;
      if (RepeatInterval != other.RepeatInterval) return false;
      if (!object.Equals(Ack, other.Ack)) return false;
      if (CronExpression != other.CronExpression) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (Recipient.Length != 0) hash ^= Recipient.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (TriggerDate != 0L) hash ^= TriggerDate.GetHashCode();
      if (RepeatInterval != 0L) hash ^= RepeatInterval.GetHashCode();
      if (ack_ != null) hash ^= Ack.GetHashCode();
      if (CronExpression.Length != 0) hash ^= CronExpression.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (Recipient.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Recipient);
      }
      if (payload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Payload);
      }
      if (TriggerDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TriggerDate);
      }
      if (RepeatInterval != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RepeatInterval);
      }
      if (ack_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Ack);
      }
      if (CronExpression.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CronExpression);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (Recipient.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recipient);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (TriggerDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TriggerDate);
      }
      if (RepeatInterval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RepeatInterval);
      }
      if (ack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ack);
      }
      if (CronExpression.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CronExpression);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReminderSchedule other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.Recipient.Length != 0) {
        Recipient = other.Recipient;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage();
        }
        Payload.MergeFrom(other.Payload);
      }
      if (other.TriggerDate != 0L) {
        TriggerDate = other.TriggerDate;
      }
      if (other.RepeatInterval != 0L) {
        RepeatInterval = other.RepeatInterval;
      }
      if (other.ack_ != null) {
        if (ack_ == null) {
          ack_ = new global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage();
        }
        Ack.MergeFrom(other.Ack);
      }
      if (other.CronExpression.Length != 0) {
        CronExpression = other.CronExpression;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            Recipient = input.ReadString();
            break;
          }
          case 26: {
            if (payload_ == null) {
              payload_ = new global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 32: {
            TriggerDate = input.ReadInt64();
            break;
          }
          case 40: {
            RepeatInterval = input.ReadInt64();
            break;
          }
          case 50: {
            if (ack_ == null) {
              ack_ = new global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage();
            }
            input.ReadMessage(ack_);
            break;
          }
          case 58: {
            CronExpression = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReminderScheduled : pb::IMessage<ReminderScheduled> {
    private static readonly pb::MessageParser<ReminderScheduled> _parser = new pb::MessageParser<ReminderScheduled>(() => new ReminderScheduled());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReminderScheduled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Reminders.Serialization.Proto.ReminderFormatsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderScheduled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderScheduled(ReminderScheduled other) : this() {
      Entry = other.entry_ != null ? other.Entry.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderScheduled Clone() {
      return new ReminderScheduled(this);
    }

    /// <summary>Field number for the "Entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReminderScheduled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReminderScheduled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Entry, other.Entry)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entry_ != null) hash ^= Entry.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entry_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entry);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReminderScheduled other) {
      if (other == null) {
        return;
      }
      if (other.entry_ != null) {
        if (entry_ == null) {
          entry_ = new global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry();
        }
        Entry.MergeFrom(other.Entry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entry_ == null) {
              entry_ = new global::Akka.Persistence.Reminders.Serialization.Proto.ReminderEntry();
            }
            input.ReadMessage(entry_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReminderCompleted : pb::IMessage<ReminderCompleted> {
    private static readonly pb::MessageParser<ReminderCompleted> _parser = new pb::MessageParser<ReminderCompleted>(() => new ReminderCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReminderCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Reminders.Serialization.Proto.ReminderFormatsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderCompleted(ReminderCompleted other) : this() {
      taskId_ = other.taskId_;
      completionDate_ = other.completionDate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderCompleted Clone() {
      return new ReminderCompleted(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CompletionDate" field.</summary>
    public const int CompletionDateFieldNumber = 2;
    private long completionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompletionDate {
      get { return completionDate_; }
      set {
        completionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReminderCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReminderCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (CompletionDate != other.CompletionDate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (CompletionDate != 0L) hash ^= CompletionDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (CompletionDate != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CompletionDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (CompletionDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompletionDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReminderCompleted other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.CompletionDate != 0L) {
        CompletionDate = other.CompletionDate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 16: {
            CompletionDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReminderCancel : pb::IMessage<ReminderCancel> {
    private static readonly pb::MessageParser<ReminderCancel> _parser = new pb::MessageParser<ReminderCancel>(() => new ReminderCancel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReminderCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Reminders.Serialization.Proto.ReminderFormatsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderCancel(ReminderCancel other) : this() {
      taskId_ = other.taskId_;
      Ack = other.ack_ != null ? other.Ack.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderCancel Clone() {
      return new ReminderCancel(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ack" field.</summary>
    public const int AckFieldNumber = 2;
    private global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage ack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage Ack {
      get { return ack_; }
      set {
        ack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReminderCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReminderCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (!object.Equals(Ack, other.Ack)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (ack_ != null) hash ^= Ack.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (ack_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ack);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (ack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ack);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReminderCancel other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.ack_ != null) {
        if (ack_ == null) {
          ack_ = new global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage();
        }
        Ack.MergeFrom(other.Ack);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            if (ack_ == null) {
              ack_ = new global::Akka.Persistence.Reminders.Serialization.Proto.OtherMessage();
            }
            input.ReadMessage(ack_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
